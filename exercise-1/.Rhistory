# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
View(vehicles)
different_manufacturers < vehicles[vehicles$make]
different_manufacturers < c(vehicles[vehicles$make])
vehicles[vehicles$make == 'make']
vehicles[vehicles$make == 'makes']
View(vehicles)
different_manufacturers < c(vehicles[vehicles$make == 'makes'])
different_manufacturers <- c(vehicles[vehicles$make == 'makes'])
different_manufacturers <- c(vehicles[vehicles$make == 'makes',])
different_manufacturers <- c(vehicles$make)
unique(different_manufacturers)
vehicles[vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles[vehicles$year == vehicles$year, "1997"]
vehicles_manufactured_in_1997 <- vehicles[vehicles$year, '1997']
vehicles_manufactured_in_1997 <- c(vehicles[vehicles$year, '1997'])
vehicles_manufactured_in_1997 <- c(vehicles[vehicles$year, '1997'])
vehicles_manufactured_in_1997 <- c(vehicles$year['1997'])
vehicles_manufactured_in_1997 <- c(vehicles$year)
vehicles_manufactured_in_1997 <- c(vehicles$year[vehicles$year == max(vehicles$year), '1997'])
makes <- vehicles$make
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(different_manufacturers)
# Filter the data set for vehicles manufactured in 1997
vehicles_manufactured_in_1997 <- c(vehicles$year[vehicles$year == max(vehicles$year), '1997'])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
unique(makes)
length(unique(makes))
vehicles_manufactured_in_1997 <- vehicles[vehicles$year == '1997']
vehicles_manufactured_in_1997 <- vehicles[vehicles$year == '1997',]
View(vehicles_manufactured_in_1997)
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
cars_1997 <- vehicles_1997[order(vehicles_1997$hwy), ]
cars_1997 <- vehicles_year[order(vehicles_year$hwy), ]
cars_1997 <- vehicles[vehicles$year == '1997',]
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == '1997',]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
View(vehicles_manufactured_in_1997)
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
View(vehicles)
makes <- vehicles$make
length(unique(makes))
cars_1997 <- vehicles[vehicles$year == '1997',]
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
cars_1997
cars_1997$average <- (cars_1997$hwy + cars_1997city) / 2
cars_1997$average <- (cars_1997$hwy + cars_1997$city) / 2
cars_1997$average = (cars_1997$hwy + cars_1997$city) / 2
cars_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
cars_1997$average
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel', vehicles$city >- 20]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive'& vehicles$city > 20]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive'& vehicles$city > 20]
vehicles$hwy == min(vehicles$hwy)
low_hwy_mpg <- two_wheel_20_mpg$id(two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy))
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive'& vehicles$city > 20]
low_hwy_mpg <- two_wheel_20_mpg$id(two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy))
low_hwy_mpg <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
worst_hwy   <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive'& vehicles$city > 20]
worst_hwy   <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$city > 20,]
low_hwy_mpg <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
low_hwy_mpg <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy),]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20,]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20,]
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20,]
low_hwy_mpg <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
year_make_choice <- function(year_choice, make_choice) {
choice <- vehicles[vehicles$year == year_choice $ vehicles$make == make_choice,]
choice[choice$hwy == max(choice$hwy), 'model']
}
year_make_choice <- function(year_choice, make_choice) {
choice <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
choice[choice$hwy == max(choice$hwy), 'model']
}
most_efficient_honda_1995 <- year_make_choice(1995, 'Honda')
most_efficient_honda_1995
write.csv(grades, file = "grades.csv")
write.csv(students, file = "grades.csv")
write.csv(students, file='grades.csv')
# a3-using-data
# Before you get started, set your working directory using the Session menu
###################### DataFrame Manipulation (20 POINTS) ######################
# Create a vector `first_names` with 5 names in it
first_name <- c('Adam', 'Michael', 'Joseph', 'Laura', 'June')
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100)
# in a math course (that correspond to the 5 names above)
math_grades <- c(54, 88, 100, 90, 79)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100)
# in a Spanish course (that correspond to the 5 names above
spanish_grades <- c(95, 70, 89, 77, 90)
# Create a data.frame variable `students` by combining
# the vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_name, math_grades, spanish_grades)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `students`
num_students <- nrow(students)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `students` minus one (b/c of their names)
num_courses <- ncol(students) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
students$grade_diff <- students$math_grades - students$spanish_grades
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
students$better_at_math <- (students$grade_diff > 0)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(students$better_at_math)
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students, file='grades.csv')
########################### Loading R Data (30 points) #########################
# In this section, you'll work with the `Titanic` data set
# Which is built into the R environment. You should be able to `View()` it
# Pay *close attention* to what each column means. Use ?Titanic to read more.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
# You should convert the `Titanic` variable into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
# Create a variable `children` that are the *only* the rows of the data frame
# with information about the number children on the Titanic.
# Create a variable `num_children` that is the total number of children.
# Hint: remember the `sum()` function!
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
########################### Reading in Data (40 points)#########################
# In this section, we'll read in a .csv file with a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy
# for each country in 1960 and 2013. We'll ask real-world questions about the
# data by writing the code that answers our question.
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
# Determine if `life_expectancy` is a data.frame by using
# the is.data.frame function. You may also want to View() it.
# Create a column `life_expectancy$change` that is the change
# in life expectancy from 1960 to 2013
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved fewer than 5 years between 1960 and 2013
# Write a function `country_change()` that takes in a country's name
# as a parameter, and returns it's change in life expectancy from 1960 to 2013
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 2013 in Sweden
# Define a function `lowest_life_exp_in_region()` that takes in a **region**
# as an argument, and returns the **name of the country**
# with the lowest life expectancy in 2013 (in that region)
# Using the function you just wrote, create a variable `lowest_in_south_asia`
# that is the country with the lowest life expectancy in 2013 in South Asia
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button)
# your graph as a .png file in your repo
# Then, in a comment below, *provide an interpretation* of the relationship
# you observe. Feel free to use any library of your choice, or base R functions.
# Put your interpretation here!
write.csv(students, file='grades.csv')
write.csv(students, file='grades.csv')
write.csv(students, file='grades.csv', row.names = F)
read.csv(grades.csv)
View('Titanic')
View(Titanic)
?Titanic
is.data.frame(Titanic)
data.frame(Titanic, stringsAsFactors = F)
children <- Titanic[Titanic$Age == 'Child',]
titanic_table <- data.frame(Titanic, stringsAsFactors = F)
children <- titanic_table[titanic_table$Age == 'Child',]
View(titanic_table)
num_children <- children[sum(children)]
num_children <- sum(children)
num_children <- children[children$Age == sum(children$Age)]
num_children <- children[children$Age == sum(children$Age),]
num_children <- children[titanic_table$Age == sum(titanic_table$Age),]
num_children <- titanic_table[titanic_table$Age == sum(titanic_table$Age),]
num_children <- children$Age[children$Age == sum(children$Age),]
num_children <- children$Age[children$Age == sum(children$Age)]
?Sum()
?sum()
num_children <- sum(children$Age)
children
num_children <- children$Age == sum(children$Age)
num_children <- children[children$Age == sum(children$Age), 'Child']
num_children <- children$Age == sum(children$Age)
most_lost <- titanic_table[titanic_table$Survived == sum(titanic_table$Freq), 'No']
most_lost
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
not_survived <- titanic_table$Survived == 'No'
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
# not_survived <- titanic_table$Survived == 'No'
most_lost <- titanic_table[titanic_table$Survived == sum(titanic_table$Survived), 'No']
num_children <- children$Age == sum(children$Freq)
num_children
num_children <- sum(children$Freq)
num_children
children <- titanic_table[titanic_table$Age == 'Child',]
children
View(children)
?Titanic
